#include <iostream>
#include <vector>
#include <string>

// Function prototypes
void displayBoard(const std::vector<std::vector<char>>& board);
bool isWin(const std::vector<std::vector<char>>& board, char player);
bool isDraw(const std::vector<std::vector<char>>& board);
void resetBoard(std::vector<std::vector<char>>& board);

int main() {
    std::vector<std::vector<char>> board(3, std::vector<char>(3, ' ')); // 3x3 grid
    char currentPlayer = 'X';
    int row, col;
    bool playAgain = true;

    std::cout << "Welcome to Tic-Tac-Toe!" << std::endl;

    while (playAgain) {
        resetBoard(board);
        bool gameEnded = false;

        while (!gameEnded) {
            displayBoard(board);

            // Player input
            std::cout << "Player " << currentPlayer << ", enter your move (row [1-3] and column [1-3]): ";
            std::cin >> row >> col;

            // Validate input
            if (row < 1 || row > 3 || col < 1 || col > 3 || board[row - 1][col - 1] != ' ') {
                std::cout << "Invalid move. Try again." << std::endl;
                continue;
            }

            // Update board
            board[row - 1][col - 1] = currentPlayer;

            // Check for win or draw
            if (isWin(board, currentPlayer)) {
                displayBoard(board);
                std::cout << "Player " << currentPlayer << " wins!" << std::endl;
                gameEnded = true;
            } else if (isDraw(board)) {
                displayBoard(board);
                std::cout << "It's a draw!" << std::endl;
                gameEnded = true;
            } else {
                // Switch players
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            }
        }

        // Ask if players want to play again
        char choice;
        std::cout << "Do you want to play again? (y/n): ";
        std::cin >> choice;
        playAgain = (choice == 'y' || choice == 'Y');
    }

    std::cout << "Thank you for playing Tic-Tac-Toe!" << std::endl;
    return 0;
}

// Function to display the game board
void displayBoard(const std::vector<std::vector<char>>& board) {
    std::cout << "\nCurrent Board:\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            std::cout << board[i][j];
            if (j < 2) std::cout << " | ";
        }
        std::cout << std::endl;
        if (i < 2) std::cout << "--|---|--" << std::endl;
    }
    std::cout << std::endl;
}

// Function to check if the current player has won
bool isWin(const std::vector<std::vector<char>>& board, char player) {
    // Check rows, columns, and diagonals
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) return true;
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) return true;
    }
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) return true;
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) return true;

    return false;
}

// Function to check if the game is a draw
bool isDraw(const std::vector<std::vector<char>>& board) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') return false;
        }
    }
    return true;
}

// Function to reset the board for a new game
void resetBoard(std::vector<std::vector<char>>& board) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            board[i][j] = ' ';
        }
    }
}
